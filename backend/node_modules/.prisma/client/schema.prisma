// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid()) //making uuid to protect from collison and also made it string
  email     String     @unique
  name      String?
  password  String
  posts     Post[]
  bookmarks Bookmark[]
  likes     Like[]
  comments  Comment[]
}

// Here we are making  one to many realtionship.
model Post {
  id            String     @id @default(uuid())
  title         String
  content       String
  published     Boolean    @default(false)
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  publishedDate DateTime?
  bookmarks     Bookmark[]
  likes         Like[]
  likeCount     Int        @default(0) // New field to store the count of likes
  comments      Comment[]
  // imageUrl      String? // Optional field for image URL
}

// Schema for bookmark

model Bookmark {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

//  Schema for likes
model Like {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
}

// Schema for comments 
model Comment {
  id            String    @id @default(uuid())
  content       String
  timestamp     DateTime  @default(now())
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  parentComment Comment?  @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId      String?
  childComments Comment[] @relation("ChildComments")
  likes         Like[]
}
